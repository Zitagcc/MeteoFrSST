* Introduction 
- In this paper, we investigate the performance of distributed applications using SimGrid and SSTMacro.
- Examine and compare the impact of different factors such as latency, bandwidth, routing and network topology on response time.
- As MPI operations in the setup step not only are time-consuming, but also affect subesquent communications. 
- To eliminate this effect one can perform many iterations to obtain a robust estimation of communication time, however, one iteration is already very time-consuming for simualtion.
- To avoid this issue, an esternal auxiliary program is used to create a shared memory segment on each node running SST-macro.
- and initialize this memory with the setup information of all the simulated MPI processes.
* Prepearing SSTMacro enviroment
- SST-CORE is one of a bunch of external components that are required to be installed before building SST.
** SST-CORE
SST-core is required to be installed before building SST.
#+BEGIN_SRC sh
  echo "Clean up the place" 
  set -exu

  echo "Clean up the place" 
  set -xeu
  rm -rf code/sstcore
  mkdir -p code/sstcore
  cd code/
  echo "Download the source code"
  test -e sstcore-source.tgz || curl -o sstcore-source.tgz -Lk https://github.com/sstsimulator/sst-core/releases/download/v8.0.0_Final/sstcore-8.0.0.tar.gz

  echo "Unpack the code"
  tar -xvf sstcore-source.tgz -C sstcore --strip-components 1
  cd sstcore/

  echo "Compile it"
  ./configure
  make -j 4 

 #+END_SRC
- In order to run the same test as the ones of MeteoFrance paper, one has to apply some changes on SST-Macro source code. 
** SST-Macro
#+BEGIN_SRC sh
  echo "Clean up the place" 
  set -exu
  mkdir -p code/
  cd code/
  echo "Checkout or update the git containing the source code"
  if [ -e sst-macro ] ; then
    cd sst-macro ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
  else
    git clone --depth=1 https://github.com/sstsimulator/sst-macro.git
  fi
     
  echo "Apply MeteoFrance changes"
  cd sst-macro/sstmac/main/
  patch -p1 < ../../../../patchs/sstmacro/patch_parseopts.diff
  patch -p1 < ../../../../patchs/sstmacro/patch_sstmacc.diff
  patch -p1 < ../../../../patchs/sstmacro/patch_sstmach.diff
  cd ../../sumi-mpi/
  patch -p1 < ../../../patchs/sstmacro/patch_mpi_api_vcollectives.diff

  cd ../
  echo "Compile it"
  ./autogen.sh 
  ./bootstrap.sh                                       
  mkdir build
  cd build/
  ../configure mpicc=MPICC mpicxx=MPICXX
  make -j4
#  sudo make install

 #+END_SRC

* Run benchmarks 
- Perform MeteoFrance's benchmarks with smpi.
** Halo with simgrid
*** Run simulations
#+BEGIN_SRC sh 
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
  cd Benchmarks/halo/

  echo "Install the modified sources"
  cd Benchmarks/MeteoFrance/code/halo/
  patch -p1 < ../../patchs/MeteoFrance/halo/patch_halomk.diff
  patch -p1 < ../../patchs/MeteoFrance/halo/patch_halocc.diff
  patch -p1 < ../../patchs/src/MeteoFrance/patch_shm_mgrmk.diff

  echo "clean all"
  make -f halo.mk clean
  make -f shm_mgr.mk clean
 
  echo "Compile it"
  make -f halo.mk
  make -f shm_mgr.mk

  echo "Run halo simulation"
  rm -rf plotsimgrid.dat
  for ncp in `seq 100  100 1000`;
  do
    smpirun -n $ncp -trace -hostfile ../cluster_hostfile.txt -platform ../cluster_crossbar.xml --cfg=smpi/host-speed:100 ./halo.exe
  done

 #+END_SRC

*** Plot 
#+begin_src gnuplot :exports code :file file.png
  cd Benchmarks/halo/

  reset

  set title "Strong scalability of halo app with simgrid"

  set xlabel "Number of processes"
  set ylabel "Time (s) "

  plot "./halosimgrid.dat" title "halo" w lp lw 1
#+end_src

** Halo with sst-macro
- Perform MeteoFrance's benchmarks with sstmacro.
#+BEGIN_SRC sh 
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
  alias sst=sst++
  # gcr
  cd Benchmarks/gcr/
  # SSTMACRO
  #/AR_SST.sh sst dragonfly
  #/AR_SST.sh simgrid dragonfly

  # Hallo
  cd ../halo
  ./auto.sh 0 1  fattree


  # Transpose
  cd ../transpose
  ./auto.sh 0 1  fattree

#+END_SRC

** Plot results
- Gather and plot in the same graphe smpi and sst results.
 #+BEGIN_SRC gnuplot

  cd Benchmarks/halo/ 
  echo "plot it"
  gnuplot
  set ylabel "Time (s)"
  set xlabel "Number of processes"
  exit
  plot "./plotsimgrid.dat" title "Halo" w lp, "./plotsstmacro.dat" title "sst-macro" w lp
 #+END_SRC

** Transpose 
*** Run simulations
#+BEGIN_SRC sh 
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
  cd Benchmarks/transpose/

  echo "clean all"
  make -f transpose.mk clean
  make -f shm_mgr.mk clean

  echo "compile all"
  make -f transpose.mk
  make -f shm_mgr.mk 

  echo "Run transpose simulation"
  rm -rf time.dat
  for ncp in `seq 5  5 500`;
  do
    /usr/bin/time -a -f '%e' -o time.tmp smpirun -n $ncp -hostfile ../cluster_hostfile.txt -platform ../cluster_crossbar.xml --cfg=smpi/host-speed:100 ./transpose.exe
    time=`cat time.tmp`
    echo "$ncp $time" >> transpose.dat
    rm time.tmp
  done

 #+END_SRC

* Tests : 
- Distribution of delayed envents of transposition for the spectral transform method with 10‚Å¥ MPI processes using : 
(a) Different routing algorithms and topology configurations.
(b) Different bandwidths.
(c) Different latencies.

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
