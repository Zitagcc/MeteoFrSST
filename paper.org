* Introduction 
- In this paper, we investigate the performance of distributed applications using SimGrid and SSTMacro.
- Examine and compare the impact of different factors such as latency, bandwidth, routing and network topology on response time.
- As MPI operations in the setup step not only are time-consuming, but also affect subesquent communications. 
- To eliminate this effect one can perform many iterations to obtain a robust estimation of communication time, however, one iteration is already very time-consuming for simualtion.
- To avoid this issue, an esternal auxiliary program is used to create a shared memory segment on each node running SST-macro.
- and initialize this memory with the setup information of all the simulated MPI processes.
* Prepearing SSTMacro enviroment

#+BEGIN_SRC sh
     echo "Clean up the place" 
     set -exu

     echo "Clean up the place" 
     set -xeu
     rm -rf code/sstcore
     mkdir -p code/sstcore
     cd code/
     echo "Download the source code"
     test -e sstcore-source.tgz || curl -o sstcore-source.tgz -Lk https://github.com/sstsimulator/sst-core/releases/download/v8.0.0_Final/sstcore-8.0.0.tar.gz

     echo "Unpack the code"
     tar -xvf sstcore-source.tgz -C sstcore --strip-components 1
     cd sstcore/

     ./configure

     make -j 4 

 #+END_SRC

#+BEGIN_SRC sh
     echo "Clean up the place" 
     set -exu
     mkdir -p code/
     cd code/
     echo "Checkout or update the git containing the source code"
      if [ -e sst-macro ] ; then
         cd sst-macro ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
      else
         git clone --depth=1 https://github.com/sstsimulator/sst-macro.git
      fi
     
     echo "Apply MeteoFrance changes"
     cd sst-macro/sstmac/main/
     patch -p1 < ../../../../patchs/sstmacro/patch_parseopts.diff
     patch -p1 < ../../../../patchs/sstmacro/patch_sstmacc.diff
     patch -p1 < ../../../../patchs/sstmacro/patch_sstmach.diff
     cd ../../sumi-mpi/
     patch -p1 < ../../../patchs/sstmacro/patch_mpi_api_vcollectives.diff

     cd ../
     echo "Compile it"
     ./autogen.sh 
     ./bootstrap.sh                                       
       mkdir build
       cd build/
       ../configure CC=mpicc CXX=mpicxx
       make -j4
       make install

 #+END_SRC

* Run benchmarks
#+BEGIN_SRC sh :tangle bin/MeteoFrance_GCR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
alias sst=sst++
# gcr
cd Benchmarks/gcr/
# SSTMACRO
/AR_SST.sh sst dragonfly
/AR_SST.sh simgrid dragonfly

# Hallo
cd ../halo
./auto.sh 0 1  fattree


# Transpose
cd ../transpose


#+END_SRC



* Perform benchmarks on SimGrid 
** GCR
*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_GCR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/gcr/

     smpicxx allreduce.cc -o allreduce

     echo "Run it"
     smpirun -np 8 -hostfile ../common/cluster_hostfile.txt -platform ../common/cluster_crossbar.xml ./allreduce 2 3 
#+END_SRC

** Halo
The most common application of the wide halo exachange is the SL method. For the resolution of 0.0125 and a time step of 30 seconds, 
the departure is appoximately 5 grid points away from its arrival if the maximum wind speed is 200 m/s: therfore, the width ofthe halo is at 
least 7 grid points using the ECMWF quasi-cubic scheme (Rithie, 1995); there are more grid points if a higher order scheme such as the SLICE-3D 
(Zerroukat and Allen, 2012) 

*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_Halo.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/MeteoFrance/code/halo/
     patch -p1 < ../../../../patchs/MeteoFrance/halo/patch_halomk.diff
     patch -p1 < ../../../../patchs/MeteoFrance/halo/patch_halocc.diff
     patch -p1 < ../../../../patchs/MeteoFrance/patch_shm_mgrmk.diff
     
     echo "Compile it"
     make -f halo.mk
     make -f shm_mgr.mk

     echo "Run it"
     smpirun -np 8 -hostfile ../common/cluster_hostfile.txt -platform ../common/cluster_crossbar.xml --cfg=smpi/host-speed:100 ./halo.exe
#+END_SRC

** Transpose 
*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_transpose.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/MeteoFrance/code/transpose/
     patch -p1 < ../../../../patchs/MeteoFrance/transpose/patch_transposemk.diff
     patch -p1 < ../../../../patchs/MeteoFrance/transpose/patch_transposecc.diff
     patch -p1 < ../../../../patchs/MeteoFrance/patch_shm_mgrmk.diff
     
     echo "Compile it"
     make -f transpose.mk
     make -f shm_mgr.mk

     echo "Run it"
     smpirun -np 8 -hostfile ../common/cluster_hostfile.txt -platform ../common/cluster_crossbar.xml --cfg=smpi/host-speed:100 ./transpose.exe
#+END_SRC

* Tests : 
- Distribution of delayed envents of transposition for the spectral transform method with 10⁴ MPI processes using : 
(a) Different routing algorithms and topology configurations.
(b) Different bandwidths.
(c) Different latencies.

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
