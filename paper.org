* Introduction 
In this paper, we investigate the performance of distributed applications using SimGrid and SSTMacro as a simulators.

* Prepearing SSTMacro enviroment
#+BEGIN_SRC sh :tangle bin/ECP_CoMD.sh
     echo "Clean up the place" 
     set -exu
     mkdir -p code/
     cd code/
     echo "Checkout or update the git containing the source code"
      if [ -e sst-macro ] ; then
         cd sst-macro ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
      else
         git clone --depth=1 https://github.com/sstsimulator/sst-macro.git
      fi
     
     echo "Apply MeteoFrance changes"
     cd sst-macro/sstmac/main/
     patch -p1 < ../../../../patchs/sstmacro/patch_parseopts.diff
     patch -p1 < ../../../../patchs/sstmacro/patch_sstmacc.diff
     patch -p1 < ../../../../patchs/sstmacro/patch_sstmach.diff
     cd ../../sumi-mpi/
     patch -p1 < ../../../patchs/sstmacro/patch_mpi_api_vcollectives.diff

     cd ../
     echo "Compile it"
     ./autogen.sh 
     ./bootstrap.sh                                       
       mkdir build
       cd build/
       ../configure CC=mpicc CXX=mpicxx
       make check
       make install

 #+END_SRC

* Perform benchmarks on SimGrid 
** GCR
*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_GCR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/MeteoFrance/code/gcr/

     smpicxx allreduce.cc -o allreduce
     
     echo "Run it"
     smpirun -np 8 -hostfile ../cluster_hostfile.txt -platform ../cluster_crossbar.xml ./allreduce 2 3 
#+END_SRC

** Halo
*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_Halo.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/MeteoFrance/code/halo/
     patch -p1 < ../../../../patchs/MeteoFrance/halo/patch_halomk.diff
     patch -p1 < ../../../../patchs/MeteoFrance/halo/patch_halocc.diff
     patch -p1 < ../../../../patchs/MeteoFrance/patch_shm_mgrmk.diff
     
     echo "Compile it"
     make -f halo.mk
     make -f shm_mgr.mk

     echo "Run it"
     smpirun -np 8 -hostfile ../cluster_hostfile.txt -platform ../cluster_crossbar.xml --cfg=smpi/host-speed:100 ./halo.exe
#+END_SRC

** Transpose 
*** Build and run  
#+BEGIN_SRC sh :tangle bin/MeteoFrance_transpose.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
 
     echo "Install the modified sources"
     cd Benchmarks/MeteoFrance/code/transpose/
     patch -p1 < ../../../../patchs/MeteoFrance/transpose/patch_transposemk.diff
     patch -p1 < ../../../../patchs/MeteoFrance/transpose/patch_transposecc.diff
     patch -p1 < ../../../../patchs/MeteoFrance/patch_shm_mgrmk.diff
     
     echo "Compile it"
     make -f transpose.mk
     make -f shm_mgr.mk

     echo "Run it"
     smpirun -np 8 -hostfile ../cluster_hostfile.txt -platform ../cluster_crossbar.xml --cfg=smpi/host-speed:100 ./transpose.exe
#+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
