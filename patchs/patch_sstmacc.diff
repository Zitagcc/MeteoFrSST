Index: sstmacro-7.1.0/sstmac/main/sstmac.cc
===================================================================
--- sstmacro-7.1.0.orig/sstmac/main/sstmac.cc
+++ sstmacro-7.1.0/sstmac/main/sstmac.cc
@@ -42,6 +42,10 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 Questions? Contact sst-macro-help@sandia.gov
 */
 
+// added two for shared memory by zhengyj
+#include <sys/ipc.h>
+#include <sys/shm.h>
+
 #include <sstmac/main/sstmac.h>
 
 #include <iostream>
@@ -85,6 +89,10 @@ Questions? Contact sst-macro-help@sandia
 #include <sumi/sumi_repo.h>
 #endif
 
+// added global pointer attached to a shared memory and virtual MPI process accesses the shared memory via this global pointer by zhengyj
+char *GO_MBLOCK;
+FILE *GO_FID;
+
 namespace sstmac {
 
 class runtime_param_bcaster :
@@ -333,6 +341,69 @@ try_main(sprockit::sim_parameters* param
     }
 #endif
 
+  // added by zhengyj
+  if (oo.go_shmid.length() > 0) {
+    std::string str;
+    std::string del = ":";
+    size_t pos = 0, k = 0, m = 0, n = 0;
+    std::string token;
+
+    // count
+    str = oo.go_shmid;
+    while ((pos = str.find(del)) != std::string::npos) {
+      n++;
+      str.erase(0, pos + del.length());
+    }
+
+#define _BYNODE_
+#if defined(_BYNODE_)
+    // by node (round robin mode)
+    str = oo.go_shmid;
+    while ((pos = str.find(del)) != std::string::npos) {
+      token = str.substr(0, pos);
+      str.erase(0, pos + del.length());
+      if ( rt->me() % n == k ) {
+        oo.shmid = std::stoi(token);
+        break;
+      }
+      k++;
+    }
+#elif defined(_BYSLOT_)
+    // by slot (continuous block mode)
+    str = oo.go_shmid;
+    m = rt->nproc() % n;
+    n = rt->nproc() / n;
+    while ((pos = str.find(del)) != std::string::npos) {
+      token = str.substr(0, pos);
+      str.erase(0, pos + del.length());
+      // continuouse block of processes is assigned to one shared memory id
+      if ( (k<m && rt->me()>= k*(n+1) && rt->me()<(k+1)*(n+1)) || (k>=m && rt->me()>= k*n+m && rt->me()<(k+1)*n+m) ) {
+        oo.shmid = std::stoi(token);
+        break;
+      }
+      k++;
+    }
+#endif
+
+    // attach
+    GO_MBLOCK = (char *)shmat(oo.shmid, NULL, 0);
+    if (GO_MBLOCK == (void *)-1) {
+      perror("Error in shmat: ");
+      sstmac::finalize(rt);
+    }
+    fprintf(stderr, "SHMAT in SST/MACRO: node=%d, shmid=%d, GO_MBLOCK=%p\n", rt->me(), oo.shmid, GO_MBLOCK);
+  }
+  if (oo.go_file.length() > 0) {
+    // open
+    std::string go_file = oo.go_file + sprockit::printf("%06d", rt->me());
+    GO_FID = fopen(go_file.c_str(), "wb"); 
+    if (GO_FID == NULL) {
+      perror("Error in fopen: ");
+      sstmac::finalize(rt);
+    }
+    fprintf(stderr, "FOPEN in SST/MACRO: node=%d, go_file=%s, GO_FID=%p\n", rt->me(), go_file.c_str(), GO_FID);
+  }
+   
   sstmac::run(oo, rt, params, stats);
 
 
@@ -350,6 +421,22 @@ try_main(sprockit::sim_parameters* param
     sstmac::print_finish(cout0, stats.wallTime);
   }
 
+  // added by zhengyj
+  if (oo.shmid > 0) {
+    // detach
+    if (shmdt(GO_MBLOCK) == -1) {
+      perror("Error in shmdt: ");
+      sstmac::finalize(rt);
+    }
+    GO_MBLOCK = NULL;
+    fprintf(stderr, "SHMDT in SST/MACRO: node=%d, shmid=%d\n", rt->me(), oo.shmid);
+  }
+  if (oo.go_file.length() > 0) {
+    fclose(GO_FID); 
+    GO_FID = NULL;
+    fprintf(stderr, "FCLOSE in SST/MACRO: node=%d, go_file=%s.%06d\n", rt->me(), oo.go_file.c_str(), rt->me());
+  }
+
   sstmac::finalize(rt);
 }
 
@@ -363,4 +450,4 @@ try_main(sprockit::sim_parameters* param
 opts::~opts()
 {
   if (params) delete params;
-}
\ No newline at end of file
+}
